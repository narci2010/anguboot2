<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId><%=groupId%></groupId>
	<artifactId><%=artifactId%></artifactId>
	<version><%=version%></version>
	<packaging>jar</packaging>

	<name><%=nameCap%></name>
	<description><%=description%></description>

	<properties>
		<!--dependencies--><% if (springboot) { %>
		<spring.boot.version>1.5.2.RELEASE</spring.boot.version>
		<metrics.spring.version>3.1.3</metrics.spring.version><% } %>
		<!--maven plugins-->
		<maven.surefire.version>2.19</maven.surefire.version>
		<skipTests>false</skipTests>
		<maven.sonar-plugin.version>2.6</maven.sonar-plugin.version>
		<maven.source-plugin.version>2.1.2</maven.source-plugin.version>
		<maven-assembly-plugin.version>2.6</maven-assembly-plugin.version><% if (springboot && plugins.jpa && generateSql) { %>
		<hibernate-maven-plugin.version>2.0.0</hibernate-maven-plugin.version><% } %>
		<maven.site-plugin.version>3.4</maven.site-plugin.version>
		<maven.resources-plugin.version>2.7</maven.resources-plugin.version>
		<maven.exec-plugin.version>1.4.0</maven.exec-plugin.version>
		<maven.antrun-plugin.version>1.6</maven.antrun-plugin.version>
		<maven.properties-plugin.version>1.0.0</maven.properties-plugin.version>
		<maven.filtering.version>1.3</maven.filtering.version>
		<maven.plantuml-plugin.version>1.2</maven.plantuml-plugin.version>
		<maven.swagger-plugin.version>3.1.3</maven.swagger-plugin.version>
		<maven.project-info-reports-plugin.version>2.8.1</maven.project-info-reports-plugin.version>
		<maven.javadoc-plugin.version>2.10.3</maven.javadoc-plugin.version>
		<!--others-->
		<file.encoding>UTF-8</file.encoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.source.version>1.8</java.source.version>
		<java.target.version>1.8</java.target.version>
		<sonar.exclusions.default>**/target/generated/**/*,**/target/generated-sources/**/*,**/crash/commands/**/*,**/vendor/**/*
		</sonar.exclusions.default>
		<sonar.exclusions>${sonar.exclusions.default}</sonar.exclusions>
		<sonar.test.exclusions.default>**/test/**/*</sonar.test.exclusions.default>
		<sonar.test.exclusions>${sonar.test.exclusions.default}</sonar.test.exclusions>
		<sonar.sources.default>src/main/java</sonar.sources.default>
		<sonar.sources>${sonar.sources.default}</sonar.sources>
		<asciidoctor.version>1.5.3</asciidoctor.version>
		<asciidoctorj.version>1.5.4.1</asciidoctorj.version>
		<asciidoctor.pdf.version>1.5.0-alpha.11</asciidoctor.pdf.version>
		<ruby.version>1.7.21</ruby.version>
		<plantuml.phase>pre-site</plantuml.phase>
		<copy.site.resources.phase>none</copy.site.resources.phase>
		<asciidoctor.base.dir>${basedir}/src/main/asciidoc</asciidoctor.base.dir>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
		<jacoco.version>0.7.8</jacoco.version>
		<javadoc.options>-Xdoclint:none</javadoc.options><% if (springboot) { %>
		<boot.profiles>dev</boot.profiles>
		<boot.classifier>executable</boot.classifier><% } %><% if (angular) { %>
		<npm.command>npm</npm.command>
		<node.command>node</node.command>
		<profile.name>delivery</profile.name>
		<!--mode property alter the route js, admin : display only customization page , normal display others routes -->
		<angular.mode>normal</angular.mode><% } %>
		<site.version>${project.version}</site.version><% if (angular) { %>
		<!--add web resources in sonar sources-->
		<sonar.sources>${sonar.sources.default},src/main/web/js,src/main/web/views,src/main/web/styles</sonar.sources><% } %>
	</properties>

	<profiles>
		<profile>
			<id>delivery</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<profile.name>delivery</profile.name>
				<filter.output>delivery</filter.output>
			</properties>
		</profile><% if (springboot) { %>
		<profile>
			<id>debug</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<jvmArguments>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</jvmArguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile><% } %>
	</profiles><% if (springboot) { %>

	<dependencyManagement>
		<dependencies>
			<!--spring boot-->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!--metrics-->
			<dependency>
				<groupId>com.ryantenney.metrics</groupId>
				<artifactId>metrics-spring</artifactId>
				<version>${metrics.spring.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement><% } %>

	<dependencies><% if (springboot) { %>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency><% if (plugins.security) { %>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency><% if (auth == 'oauth') { %>
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
		</dependency><% } %><% } %>
		<dependency>
			<groupId>com.ryantenney.metrics</groupId>
			<artifactId>metrics-spring</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency><% if (plugins.jpa) { %>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency><% } %>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<!--tests-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency><% if (plugins.security) { %>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency><% } %><% if (plugins.restDoc) { %>
		<dependency>
      <groupId>org.springframework.restdocs</groupId>
      <artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
    	</dependency><% } %><% } %><% if (!springboot) { %>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency><% } %>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes><% if (plugins.crash) { %>
					<include>**/*.groovy</include><% } %>
					<include>**/*.yml</include>
				</includes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins><% if (springboot) { %>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.boot.version}</version>
				</plugin><% } %>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<encoding>${file.encoding}</encoding>
						<source>${java.source.version}</source>
						<target>${java.target.version}</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven.surefire.version}</version>
					<configuration>
						<forkCount>1</forkCount>
						<reuseForks>false</reuseForks>
						<argLine>${jacoco.agent.arg}</argLine>
						<trimStackTrace>false</trimStackTrace>
						<skipTests>${skipTests}</skipTests>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven.source-plugin.version}</version>
				<executions>
					<execution>
						<id>jar-sources</id>
						<phase>package</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
					<execution>
						<id>jar-test-sources</id>
						<phase>package</phase>
						<goals>
							<goal>test-jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<!-- prepare agent for measuring unit tests -->
					<execution>
						<id>prepare-unit-tests</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<propertyName>jacoco.agent.arg</propertyName>
						</configuration>
					</execution>
				</executions>
			</plugin><% if (angular) { %>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven.antrun-plugin.version}</version>
				<executions>
          <execution>
              <id>npm-install</id>
              <phase>prepare-package</phase>
              <configuration>
                  <target name="npm update" unless="skipNpm">
                      <exec dir="${project.basedir}" executable="cmd" failonerror="true" osfamily="windows">
                          <arg line="/c ${npm.command} update"/>
                      </exec>
                      <exec dir="${project.basedir}" executable="${npm.command}" failonerror="true"
                            osfamily="unix">
                          <arg value="install"/>
                      </exec>
                  </target>
              </configuration>
              <goals>
                  <goal>run</goal>
              </goals>
          </execution>
          <execution>
              <id>npm-build</id>
              <phase>prepare-package</phase>
              <configuration>
                  <target name="npm build" unless="skipNpmBuild">
                      <exec dir="${project.basedir}" executable="cmd" failonerror="true" osfamily="windows">
                          <arg line="/c ${npm.command} run build"/>
                      </exec>
                      <exec dir="${project.basedir}" executable="${npm.command}" failonerror="true"
                            osfamily="unix">
                          <arg value="run"/>
                          <arg value="build"/>
                      </exec>
                  </target>
              </configuration>
              <goals>
                  <goal>run</goal>
              </goals>
          </execution><% if (plugins.custo) { %>
					<execution>
						<id>npm-build-custo</id>
						<phase>prepare-package</phase>
              <configuration>
                  <target name="npm build" unless="skipNpmBuild">
                      <exec dir="${project.basedir}" executable="cmd" failonerror="true" osfamily="windows">
                          <arg line="/c ${npm.command} run build"/>
                      </exec>
                      <exec dir="${project.basedir}" executable="${npm.command}" failonerror="true"
                            osfamily="unix">
                          <arg value="run"/>
                          <arg value="build"/>
                      </exec>
                  </target>
              </configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution><% } %>
			</executions>
			</plugin><% } %><% if (plugins.restDoc) { %>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>${asciidoctor.version}</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/public/docs</outputDirectory>
							<backend>html</backend>
							<doctype>book</doctype>
							<attributes>
								<snippets>${project.build.directory}/generated-snippets</snippets>
							</attributes>
						</configuration>
					</execution>
				</executions>
			</plugin><% } %>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<executions><% if (springboot) { %>
					<execution>
						<id>dev-resources</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.testOutputDirectory}/</outputDirectory>
							<filters>
								<filter>${project.basedir}/src/main/filters/dev.properties</filter>
							</filters>
							<resources>
								<resource>
									<directory>src/main/config</directory>
									<filtering>true</filtering>
									<includes>
										<include>application.yml</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution><% } %>
					<execution>
						<id>${profile.name}</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${filter.output}</outputDirectory>
							<filters>
								<filter>${project.basedir}/src/main/filters/${profile.name}.properties</filter>
							</filters>
							<resources>
								<resource>
									<directory>src/main/config</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin><% if (springboot) { %>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring.boot.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<profiles>
						<profile>${boot.profiles}</profile>
					</profiles>
					<arguments>
						<argument>--spring.config.location=file:target/test-classes/application.yml</argument>
					</arguments>
					<fork>true</fork>
					<executable>true</executable>
					<classifier>${boot.classifier}</classifier>
				</configuration>
			</plugin><% } %>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven-assembly-plugin.version}</version>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/assembly.xml</descriptor>
					</descriptors>
					<appendAssemblyId>true</appendAssemblyId>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin><% if (springboot && plugins.jpa && generateSql) { %>
			<plugin>
				<groupId>de.juplo</groupId>
				<artifactId>hibernate-maven-plugin</artifactId>
				<version>${hibernate-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>generate-create-schema</id>
						<phase>process-classes</phase>
						<goals>
							<goal>create</goal>
						</goals>
						<configuration>
							<outputFile>${project.build.directory}/delivery/create.sql</outputFile>
						</configuration>
					</execution>
					<execution>
						<id>generate-drop-schema</id>
						<phase>process-classes</phase>
						<goals>
							<goal>drop</goal>
						</goals>
						<configuration>
							<outputFile>${project.build.directory}/delivery/drop.sql</outputFile>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<export>false</export>
					<dialect>org.hibernate.dialect.MySQL5InnoDBDialect</dialect>
					<implicitNamingStrategy>org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</implicitNamingStrategy>
					<physicalNamingStrategy>org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</physicalNamingStrategy>
				</configuration>
			</plugin><% } %> <% if (plugins.docker) { %>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<imageName>${project.artifactId}</imageName>
					<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}-${boot.classifier}.${project.packaging}</include>
						</resource>
					</resources>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
				</configuration>
			</plugin><% } %>
		</plugins>
	</build>
</project>
